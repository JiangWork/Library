/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.klatencor.klara.future.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-08")
public class TInspAreaDescriptor implements org.apache.thrift.TBase<TInspAreaDescriptor, TInspAreaDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TInspAreaDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TInspAreaDescriptor");

  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("iaId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INSP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("inspType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DIE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("dieSize", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DIE_PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("diePitch", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("columnCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rowCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField INSP_ORGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("inspOrgin", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SURFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("surface", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DIE_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("diePoints", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SENSE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("senseCount", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TInspAreaDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TInspAreaDescriptorTupleSchemeFactory());
  }

  public int index; // required
  public int iaId; // required
  public String inspType; // required
  public TIntPoint dieSize; // required
  public TIntPoint diePitch; // required
  public int columnCount; // required
  public int rowCount; // required
  public TIntPoint inspOrgin; // required
  public String mode; // required
  public int surface; // required
  public List<TIntPoint> diePoints; // required
  public int senseCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX((short)1, "index"),
    IA_ID((short)2, "iaId"),
    INSP_TYPE((short)3, "inspType"),
    DIE_SIZE((short)4, "dieSize"),
    DIE_PITCH((short)5, "diePitch"),
    COLUMN_COUNT((short)6, "columnCount"),
    ROW_COUNT((short)7, "rowCount"),
    INSP_ORGIN((short)8, "inspOrgin"),
    MODE((short)9, "mode"),
    SURFACE((short)10, "surface"),
    DIE_POINTS((short)11, "diePoints"),
    SENSE_COUNT((short)13, "senseCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
          return INDEX;
        case 2: // IA_ID
          return IA_ID;
        case 3: // INSP_TYPE
          return INSP_TYPE;
        case 4: // DIE_SIZE
          return DIE_SIZE;
        case 5: // DIE_PITCH
          return DIE_PITCH;
        case 6: // COLUMN_COUNT
          return COLUMN_COUNT;
        case 7: // ROW_COUNT
          return ROW_COUNT;
        case 8: // INSP_ORGIN
          return INSP_ORGIN;
        case 9: // MODE
          return MODE;
        case 10: // SURFACE
          return SURFACE;
        case 11: // DIE_POINTS
          return DIE_POINTS;
        case 13: // SENSE_COUNT
          return SENSE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __IAID_ISSET_ID = 1;
  private static final int __COLUMNCOUNT_ISSET_ID = 2;
  private static final int __ROWCOUNT_ISSET_ID = 3;
  private static final int __SURFACE_ISSET_ID = 4;
  private static final int __SENSECOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IA_ID, new org.apache.thrift.meta_data.FieldMetaData("iaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("inspType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("dieSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntPoint.class)));
    tmpMap.put(_Fields.DIE_PITCH, new org.apache.thrift.meta_data.FieldMetaData("diePitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntPoint.class)));
    tmpMap.put(_Fields.COLUMN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("columnCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rowCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSP_ORGIN, new org.apache.thrift.meta_data.FieldMetaData("inspOrgin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntPoint.class)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURFACE, new org.apache.thrift.meta_data.FieldMetaData("surface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIE_POINTS, new org.apache.thrift.meta_data.FieldMetaData("diePoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntPoint.class))));
    tmpMap.put(_Fields.SENSE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("senseCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TInspAreaDescriptor.class, metaDataMap);
  }

  public TInspAreaDescriptor() {
  }

  public TInspAreaDescriptor(
    int index,
    int iaId,
    String inspType,
    TIntPoint dieSize,
    TIntPoint diePitch,
    int columnCount,
    int rowCount,
    TIntPoint inspOrgin,
    String mode,
    int surface,
    List<TIntPoint> diePoints,
    int senseCount)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
    this.iaId = iaId;
    setIaIdIsSet(true);
    this.inspType = inspType;
    this.dieSize = dieSize;
    this.diePitch = diePitch;
    this.columnCount = columnCount;
    setColumnCountIsSet(true);
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    this.inspOrgin = inspOrgin;
    this.mode = mode;
    this.surface = surface;
    setSurfaceIsSet(true);
    this.diePoints = diePoints;
    this.senseCount = senseCount;
    setSenseCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TInspAreaDescriptor(TInspAreaDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index = other.index;
    this.iaId = other.iaId;
    if (other.isSetInspType()) {
      this.inspType = other.inspType;
    }
    if (other.isSetDieSize()) {
      this.dieSize = new TIntPoint(other.dieSize);
    }
    if (other.isSetDiePitch()) {
      this.diePitch = new TIntPoint(other.diePitch);
    }
    this.columnCount = other.columnCount;
    this.rowCount = other.rowCount;
    if (other.isSetInspOrgin()) {
      this.inspOrgin = new TIntPoint(other.inspOrgin);
    }
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
    this.surface = other.surface;
    if (other.isSetDiePoints()) {
      List<TIntPoint> __this__diePoints = new ArrayList<TIntPoint>(other.diePoints.size());
      for (TIntPoint other_element : other.diePoints) {
        __this__diePoints.add(new TIntPoint(other_element));
      }
      this.diePoints = __this__diePoints;
    }
    this.senseCount = other.senseCount;
  }

  public TInspAreaDescriptor deepCopy() {
    return new TInspAreaDescriptor(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.index = 0;
    setIaIdIsSet(false);
    this.iaId = 0;
    this.inspType = null;
    this.dieSize = null;
    this.diePitch = null;
    setColumnCountIsSet(false);
    this.columnCount = 0;
    setRowCountIsSet(false);
    this.rowCount = 0;
    this.inspOrgin = null;
    this.mode = null;
    setSurfaceIsSet(false);
    this.surface = 0;
    this.diePoints = null;
    setSenseCountIsSet(false);
    this.senseCount = 0;
  }

  public int getIndex() {
    return this.index;
  }

  public TInspAreaDescriptor setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public int getIaId() {
    return this.iaId;
  }

  public TInspAreaDescriptor setIaId(int iaId) {
    this.iaId = iaId;
    setIaIdIsSet(true);
    return this;
  }

  public void unsetIaId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IAID_ISSET_ID);
  }

  /** Returns true if field iaId is set (has been assigned a value) and false otherwise */
  public boolean isSetIaId() {
    return EncodingUtils.testBit(__isset_bitfield, __IAID_ISSET_ID);
  }

  public void setIaIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IAID_ISSET_ID, value);
  }

  public String getInspType() {
    return this.inspType;
  }

  public TInspAreaDescriptor setInspType(String inspType) {
    this.inspType = inspType;
    return this;
  }

  public void unsetInspType() {
    this.inspType = null;
  }

  /** Returns true if field inspType is set (has been assigned a value) and false otherwise */
  public boolean isSetInspType() {
    return this.inspType != null;
  }

  public void setInspTypeIsSet(boolean value) {
    if (!value) {
      this.inspType = null;
    }
  }

  public TIntPoint getDieSize() {
    return this.dieSize;
  }

  public TInspAreaDescriptor setDieSize(TIntPoint dieSize) {
    this.dieSize = dieSize;
    return this;
  }

  public void unsetDieSize() {
    this.dieSize = null;
  }

  /** Returns true if field dieSize is set (has been assigned a value) and false otherwise */
  public boolean isSetDieSize() {
    return this.dieSize != null;
  }

  public void setDieSizeIsSet(boolean value) {
    if (!value) {
      this.dieSize = null;
    }
  }

  public TIntPoint getDiePitch() {
    return this.diePitch;
  }

  public TInspAreaDescriptor setDiePitch(TIntPoint diePitch) {
    this.diePitch = diePitch;
    return this;
  }

  public void unsetDiePitch() {
    this.diePitch = null;
  }

  /** Returns true if field diePitch is set (has been assigned a value) and false otherwise */
  public boolean isSetDiePitch() {
    return this.diePitch != null;
  }

  public void setDiePitchIsSet(boolean value) {
    if (!value) {
      this.diePitch = null;
    }
  }

  public int getColumnCount() {
    return this.columnCount;
  }

  public TInspAreaDescriptor setColumnCount(int columnCount) {
    this.columnCount = columnCount;
    setColumnCountIsSet(true);
    return this;
  }

  public void unsetColumnCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID);
  }

  /** Returns true if field columnCount is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID);
  }

  public void setColumnCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID, value);
  }

  public int getRowCount() {
    return this.rowCount;
  }

  public TInspAreaDescriptor setRowCount(int rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  public TIntPoint getInspOrgin() {
    return this.inspOrgin;
  }

  public TInspAreaDescriptor setInspOrgin(TIntPoint inspOrgin) {
    this.inspOrgin = inspOrgin;
    return this;
  }

  public void unsetInspOrgin() {
    this.inspOrgin = null;
  }

  /** Returns true if field inspOrgin is set (has been assigned a value) and false otherwise */
  public boolean isSetInspOrgin() {
    return this.inspOrgin != null;
  }

  public void setInspOrginIsSet(boolean value) {
    if (!value) {
      this.inspOrgin = null;
    }
  }

  public String getMode() {
    return this.mode;
  }

  public TInspAreaDescriptor setMode(String mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public int getSurface() {
    return this.surface;
  }

  public TInspAreaDescriptor setSurface(int surface) {
    this.surface = surface;
    setSurfaceIsSet(true);
    return this;
  }

  public void unsetSurface() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURFACE_ISSET_ID);
  }

  /** Returns true if field surface is set (has been assigned a value) and false otherwise */
  public boolean isSetSurface() {
    return EncodingUtils.testBit(__isset_bitfield, __SURFACE_ISSET_ID);
  }

  public void setSurfaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURFACE_ISSET_ID, value);
  }

  public int getDiePointsSize() {
    return (this.diePoints == null) ? 0 : this.diePoints.size();
  }

  public java.util.Iterator<TIntPoint> getDiePointsIterator() {
    return (this.diePoints == null) ? null : this.diePoints.iterator();
  }

  public void addToDiePoints(TIntPoint elem) {
    if (this.diePoints == null) {
      this.diePoints = new ArrayList<TIntPoint>();
    }
    this.diePoints.add(elem);
  }

  public List<TIntPoint> getDiePoints() {
    return this.diePoints;
  }

  public TInspAreaDescriptor setDiePoints(List<TIntPoint> diePoints) {
    this.diePoints = diePoints;
    return this;
  }

  public void unsetDiePoints() {
    this.diePoints = null;
  }

  /** Returns true if field diePoints is set (has been assigned a value) and false otherwise */
  public boolean isSetDiePoints() {
    return this.diePoints != null;
  }

  public void setDiePointsIsSet(boolean value) {
    if (!value) {
      this.diePoints = null;
    }
  }

  public int getSenseCount() {
    return this.senseCount;
  }

  public TInspAreaDescriptor setSenseCount(int senseCount) {
    this.senseCount = senseCount;
    setSenseCountIsSet(true);
    return this;
  }

  public void unsetSenseCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENSECOUNT_ISSET_ID);
  }

  /** Returns true if field senseCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSenseCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SENSECOUNT_ISSET_ID);
  }

  public void setSenseCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENSECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    case IA_ID:
      if (value == null) {
        unsetIaId();
      } else {
        setIaId((Integer)value);
      }
      break;

    case INSP_TYPE:
      if (value == null) {
        unsetInspType();
      } else {
        setInspType((String)value);
      }
      break;

    case DIE_SIZE:
      if (value == null) {
        unsetDieSize();
      } else {
        setDieSize((TIntPoint)value);
      }
      break;

    case DIE_PITCH:
      if (value == null) {
        unsetDiePitch();
      } else {
        setDiePitch((TIntPoint)value);
      }
      break;

    case COLUMN_COUNT:
      if (value == null) {
        unsetColumnCount();
      } else {
        setColumnCount((Integer)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRowCount();
      } else {
        setRowCount((Integer)value);
      }
      break;

    case INSP_ORGIN:
      if (value == null) {
        unsetInspOrgin();
      } else {
        setInspOrgin((TIntPoint)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((String)value);
      }
      break;

    case SURFACE:
      if (value == null) {
        unsetSurface();
      } else {
        setSurface((Integer)value);
      }
      break;

    case DIE_POINTS:
      if (value == null) {
        unsetDiePoints();
      } else {
        setDiePoints((List<TIntPoint>)value);
      }
      break;

    case SENSE_COUNT:
      if (value == null) {
        unsetSenseCount();
      } else {
        setSenseCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return getIndex();

    case IA_ID:
      return getIaId();

    case INSP_TYPE:
      return getInspType();

    case DIE_SIZE:
      return getDieSize();

    case DIE_PITCH:
      return getDiePitch();

    case COLUMN_COUNT:
      return getColumnCount();

    case ROW_COUNT:
      return getRowCount();

    case INSP_ORGIN:
      return getInspOrgin();

    case MODE:
      return getMode();

    case SURFACE:
      return getSurface();

    case DIE_POINTS:
      return getDiePoints();

    case SENSE_COUNT:
      return getSenseCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case IA_ID:
      return isSetIaId();
    case INSP_TYPE:
      return isSetInspType();
    case DIE_SIZE:
      return isSetDieSize();
    case DIE_PITCH:
      return isSetDiePitch();
    case COLUMN_COUNT:
      return isSetColumnCount();
    case ROW_COUNT:
      return isSetRowCount();
    case INSP_ORGIN:
      return isSetInspOrgin();
    case MODE:
      return isSetMode();
    case SURFACE:
      return isSetSurface();
    case DIE_POINTS:
      return isSetDiePoints();
    case SENSE_COUNT:
      return isSetSenseCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TInspAreaDescriptor)
      return this.equals((TInspAreaDescriptor)that);
    return false;
  }

  public boolean equals(TInspAreaDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_iaId = true;
    boolean that_present_iaId = true;
    if (this_present_iaId || that_present_iaId) {
      if (!(this_present_iaId && that_present_iaId))
        return false;
      if (this.iaId != that.iaId)
        return false;
    }

    boolean this_present_inspType = true && this.isSetInspType();
    boolean that_present_inspType = true && that.isSetInspType();
    if (this_present_inspType || that_present_inspType) {
      if (!(this_present_inspType && that_present_inspType))
        return false;
      if (!this.inspType.equals(that.inspType))
        return false;
    }

    boolean this_present_dieSize = true && this.isSetDieSize();
    boolean that_present_dieSize = true && that.isSetDieSize();
    if (this_present_dieSize || that_present_dieSize) {
      if (!(this_present_dieSize && that_present_dieSize))
        return false;
      if (!this.dieSize.equals(that.dieSize))
        return false;
    }

    boolean this_present_diePitch = true && this.isSetDiePitch();
    boolean that_present_diePitch = true && that.isSetDiePitch();
    if (this_present_diePitch || that_present_diePitch) {
      if (!(this_present_diePitch && that_present_diePitch))
        return false;
      if (!this.diePitch.equals(that.diePitch))
        return false;
    }

    boolean this_present_columnCount = true;
    boolean that_present_columnCount = true;
    if (this_present_columnCount || that_present_columnCount) {
      if (!(this_present_columnCount && that_present_columnCount))
        return false;
      if (this.columnCount != that.columnCount)
        return false;
    }

    boolean this_present_rowCount = true;
    boolean that_present_rowCount = true;
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount))
        return false;
      if (this.rowCount != that.rowCount)
        return false;
    }

    boolean this_present_inspOrgin = true && this.isSetInspOrgin();
    boolean that_present_inspOrgin = true && that.isSetInspOrgin();
    if (this_present_inspOrgin || that_present_inspOrgin) {
      if (!(this_present_inspOrgin && that_present_inspOrgin))
        return false;
      if (!this.inspOrgin.equals(that.inspOrgin))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    boolean this_present_surface = true;
    boolean that_present_surface = true;
    if (this_present_surface || that_present_surface) {
      if (!(this_present_surface && that_present_surface))
        return false;
      if (this.surface != that.surface)
        return false;
    }

    boolean this_present_diePoints = true && this.isSetDiePoints();
    boolean that_present_diePoints = true && that.isSetDiePoints();
    if (this_present_diePoints || that_present_diePoints) {
      if (!(this_present_diePoints && that_present_diePoints))
        return false;
      if (!this.diePoints.equals(that.diePoints))
        return false;
    }

    boolean this_present_senseCount = true;
    boolean that_present_senseCount = true;
    if (this_present_senseCount || that_present_senseCount) {
      if (!(this_present_senseCount && that_present_senseCount))
        return false;
      if (this.senseCount != that.senseCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_index = true;
    list.add(present_index);
    if (present_index)
      list.add(index);

    boolean present_iaId = true;
    list.add(present_iaId);
    if (present_iaId)
      list.add(iaId);

    boolean present_inspType = true && (isSetInspType());
    list.add(present_inspType);
    if (present_inspType)
      list.add(inspType);

    boolean present_dieSize = true && (isSetDieSize());
    list.add(present_dieSize);
    if (present_dieSize)
      list.add(dieSize);

    boolean present_diePitch = true && (isSetDiePitch());
    list.add(present_diePitch);
    if (present_diePitch)
      list.add(diePitch);

    boolean present_columnCount = true;
    list.add(present_columnCount);
    if (present_columnCount)
      list.add(columnCount);

    boolean present_rowCount = true;
    list.add(present_rowCount);
    if (present_rowCount)
      list.add(rowCount);

    boolean present_inspOrgin = true && (isSetInspOrgin());
    list.add(present_inspOrgin);
    if (present_inspOrgin)
      list.add(inspOrgin);

    boolean present_mode = true && (isSetMode());
    list.add(present_mode);
    if (present_mode)
      list.add(mode);

    boolean present_surface = true;
    list.add(present_surface);
    if (present_surface)
      list.add(surface);

    boolean present_diePoints = true && (isSetDiePoints());
    list.add(present_diePoints);
    if (present_diePoints)
      list.add(diePoints);

    boolean present_senseCount = true;
    list.add(present_senseCount);
    if (present_senseCount)
      list.add(senseCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(TInspAreaDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIaId()).compareTo(other.isSetIaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iaId, other.iaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInspType()).compareTo(other.isSetInspType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInspType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inspType, other.inspType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDieSize()).compareTo(other.isSetDieSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDieSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dieSize, other.dieSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiePitch()).compareTo(other.isSetDiePitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiePitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diePitch, other.diePitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnCount()).compareTo(other.isSetColumnCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnCount, other.columnCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowCount()).compareTo(other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInspOrgin()).compareTo(other.isSetInspOrgin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInspOrgin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inspOrgin, other.inspOrgin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurface()).compareTo(other.isSetSurface());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurface()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surface, other.surface);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiePoints()).compareTo(other.isSetDiePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diePoints, other.diePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenseCount()).compareTo(other.isSetSenseCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenseCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senseCount, other.senseCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TInspAreaDescriptor(");
    boolean first = true;

    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iaId:");
    sb.append(this.iaId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inspType:");
    if (this.inspType == null) {
      sb.append("null");
    } else {
      sb.append(this.inspType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dieSize:");
    if (this.dieSize == null) {
      sb.append("null");
    } else {
      sb.append(this.dieSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diePitch:");
    if (this.diePitch == null) {
      sb.append("null");
    } else {
      sb.append(this.diePitch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnCount:");
    sb.append(this.columnCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowCount:");
    sb.append(this.rowCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inspOrgin:");
    if (this.inspOrgin == null) {
      sb.append("null");
    } else {
      sb.append(this.inspOrgin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    if (this.mode == null) {
      sb.append("null");
    } else {
      sb.append(this.mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("surface:");
    sb.append(this.surface);
    first = false;
    if (!first) sb.append(", ");
    sb.append("diePoints:");
    if (this.diePoints == null) {
      sb.append("null");
    } else {
      sb.append(this.diePoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senseCount:");
    sb.append(this.senseCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dieSize != null) {
      dieSize.validate();
    }
    if (diePitch != null) {
      diePitch.validate();
    }
    if (inspOrgin != null) {
      inspOrgin.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TInspAreaDescriptorStandardSchemeFactory implements SchemeFactory {
    public TInspAreaDescriptorStandardScheme getScheme() {
      return new TInspAreaDescriptorStandardScheme();
    }
  }

  private static class TInspAreaDescriptorStandardScheme extends StandardScheme<TInspAreaDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TInspAreaDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iaId = iprot.readI32();
              struct.setIaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inspType = iprot.readString();
              struct.setInspTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dieSize = new TIntPoint();
              struct.dieSize.read(iprot);
              struct.setDieSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIE_PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.diePitch = new TIntPoint();
              struct.diePitch.read(iprot);
              struct.setDiePitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnCount = iprot.readI32();
              struct.setColumnCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowCount = iprot.readI32();
              struct.setRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INSP_ORGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.inspOrgin = new TIntPoint();
              struct.inspOrgin.read(iprot);
              struct.setInspOrginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mode = iprot.readString();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SURFACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.surface = iprot.readI32();
              struct.setSurfaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DIE_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.diePoints = new ArrayList<TIntPoint>(_list18.size);
                TIntPoint _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new TIntPoint();
                  _elem19.read(iprot);
                  struct.diePoints.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setDiePointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SENSE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.senseCount = iprot.readI32();
              struct.setSenseCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TInspAreaDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IA_ID_FIELD_DESC);
      oprot.writeI32(struct.iaId);
      oprot.writeFieldEnd();
      if (struct.inspType != null) {
        oprot.writeFieldBegin(INSP_TYPE_FIELD_DESC);
        oprot.writeString(struct.inspType);
        oprot.writeFieldEnd();
      }
      if (struct.dieSize != null) {
        oprot.writeFieldBegin(DIE_SIZE_FIELD_DESC);
        struct.dieSize.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.diePitch != null) {
        oprot.writeFieldBegin(DIE_PITCH_FIELD_DESC);
        struct.diePitch.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLUMN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.columnCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.rowCount);
      oprot.writeFieldEnd();
      if (struct.inspOrgin != null) {
        oprot.writeFieldBegin(INSP_ORGIN_FIELD_DESC);
        struct.inspOrgin.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mode != null) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeString(struct.mode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SURFACE_FIELD_DESC);
      oprot.writeI32(struct.surface);
      oprot.writeFieldEnd();
      if (struct.diePoints != null) {
        oprot.writeFieldBegin(DIE_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.diePoints.size()));
          for (TIntPoint _iter21 : struct.diePoints)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENSE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.senseCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TInspAreaDescriptorTupleSchemeFactory implements SchemeFactory {
    public TInspAreaDescriptorTupleScheme getScheme() {
      return new TInspAreaDescriptorTupleScheme();
    }
  }

  private static class TInspAreaDescriptorTupleScheme extends TupleScheme<TInspAreaDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TInspAreaDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndex()) {
        optionals.set(0);
      }
      if (struct.isSetIaId()) {
        optionals.set(1);
      }
      if (struct.isSetInspType()) {
        optionals.set(2);
      }
      if (struct.isSetDieSize()) {
        optionals.set(3);
      }
      if (struct.isSetDiePitch()) {
        optionals.set(4);
      }
      if (struct.isSetColumnCount()) {
        optionals.set(5);
      }
      if (struct.isSetRowCount()) {
        optionals.set(6);
      }
      if (struct.isSetInspOrgin()) {
        optionals.set(7);
      }
      if (struct.isSetMode()) {
        optionals.set(8);
      }
      if (struct.isSetSurface()) {
        optionals.set(9);
      }
      if (struct.isSetDiePoints()) {
        optionals.set(10);
      }
      if (struct.isSetSenseCount()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
      if (struct.isSetIaId()) {
        oprot.writeI32(struct.iaId);
      }
      if (struct.isSetInspType()) {
        oprot.writeString(struct.inspType);
      }
      if (struct.isSetDieSize()) {
        struct.dieSize.write(oprot);
      }
      if (struct.isSetDiePitch()) {
        struct.diePitch.write(oprot);
      }
      if (struct.isSetColumnCount()) {
        oprot.writeI32(struct.columnCount);
      }
      if (struct.isSetRowCount()) {
        oprot.writeI32(struct.rowCount);
      }
      if (struct.isSetInspOrgin()) {
        struct.inspOrgin.write(oprot);
      }
      if (struct.isSetMode()) {
        oprot.writeString(struct.mode);
      }
      if (struct.isSetSurface()) {
        oprot.writeI32(struct.surface);
      }
      if (struct.isSetDiePoints()) {
        {
          oprot.writeI32(struct.diePoints.size());
          for (TIntPoint _iter22 : struct.diePoints)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetSenseCount()) {
        oprot.writeI32(struct.senseCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TInspAreaDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.iaId = iprot.readI32();
        struct.setIaIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inspType = iprot.readString();
        struct.setInspTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dieSize = new TIntPoint();
        struct.dieSize.read(iprot);
        struct.setDieSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.diePitch = new TIntPoint();
        struct.diePitch.read(iprot);
        struct.setDiePitchIsSet(true);
      }
      if (incoming.get(5)) {
        struct.columnCount = iprot.readI32();
        struct.setColumnCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rowCount = iprot.readI32();
        struct.setRowCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.inspOrgin = new TIntPoint();
        struct.inspOrgin.read(iprot);
        struct.setInspOrginIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mode = iprot.readString();
        struct.setModeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.surface = iprot.readI32();
        struct.setSurfaceIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.diePoints = new ArrayList<TIntPoint>(_list23.size);
          TIntPoint _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new TIntPoint();
            _elem24.read(iprot);
            struct.diePoints.add(_elem24);
          }
        }
        struct.setDiePointsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.senseCount = iprot.readI32();
        struct.setSenseCountIsSet(true);
      }
    }
  }

}

