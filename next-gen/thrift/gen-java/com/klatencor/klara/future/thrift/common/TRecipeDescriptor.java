/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.klatencor.klara.future.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-08")
public class TRecipeDescriptor implements org.apache.thrift.TBase<TRecipeDescriptor, TRecipeDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TRecipeDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRecipeDescriptor");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SYSTEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("systemName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IA_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("iaNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALIGNMENT_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("alignmentPoints", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRecipeDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRecipeDescriptorTupleSchemeFactory());
  }

  public String name; // required
  public String systemName; // required
  public int version; // required
  public int iaNum; // required
  public List<TIntPoint> alignmentPoints; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SYSTEM_NAME((short)2, "systemName"),
    VERSION((short)3, "version"),
    IA_NUM((short)4, "iaNum"),
    ALIGNMENT_POINTS((short)6, "alignmentPoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SYSTEM_NAME
          return SYSTEM_NAME;
        case 3: // VERSION
          return VERSION;
        case 4: // IA_NUM
          return IA_NUM;
        case 6: // ALIGNMENT_POINTS
          return ALIGNMENT_POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __IANUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("systemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IA_NUM, new org.apache.thrift.meta_data.FieldMetaData("iaNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALIGNMENT_POINTS, new org.apache.thrift.meta_data.FieldMetaData("alignmentPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntPoint.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRecipeDescriptor.class, metaDataMap);
  }

  public TRecipeDescriptor() {
  }

  public TRecipeDescriptor(
    String name,
    String systemName,
    int version,
    int iaNum,
    List<TIntPoint> alignmentPoints)
  {
    this();
    this.name = name;
    this.systemName = systemName;
    this.version = version;
    setVersionIsSet(true);
    this.iaNum = iaNum;
    setIaNumIsSet(true);
    this.alignmentPoints = alignmentPoints;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRecipeDescriptor(TRecipeDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSystemName()) {
      this.systemName = other.systemName;
    }
    this.version = other.version;
    this.iaNum = other.iaNum;
    if (other.isSetAlignmentPoints()) {
      List<TIntPoint> __this__alignmentPoints = new ArrayList<TIntPoint>(other.alignmentPoints.size());
      for (TIntPoint other_element : other.alignmentPoints) {
        __this__alignmentPoints.add(new TIntPoint(other_element));
      }
      this.alignmentPoints = __this__alignmentPoints;
    }
  }

  public TRecipeDescriptor deepCopy() {
    return new TRecipeDescriptor(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.systemName = null;
    setVersionIsSet(false);
    this.version = 0;
    setIaNumIsSet(false);
    this.iaNum = 0;
    this.alignmentPoints = null;
  }

  public String getName() {
    return this.name;
  }

  public TRecipeDescriptor setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSystemName() {
    return this.systemName;
  }

  public TRecipeDescriptor setSystemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  public void unsetSystemName() {
    this.systemName = null;
  }

  /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemName() {
    return this.systemName != null;
  }

  public void setSystemNameIsSet(boolean value) {
    if (!value) {
      this.systemName = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public TRecipeDescriptor setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getIaNum() {
    return this.iaNum;
  }

  public TRecipeDescriptor setIaNum(int iaNum) {
    this.iaNum = iaNum;
    setIaNumIsSet(true);
    return this;
  }

  public void unsetIaNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IANUM_ISSET_ID);
  }

  /** Returns true if field iaNum is set (has been assigned a value) and false otherwise */
  public boolean isSetIaNum() {
    return EncodingUtils.testBit(__isset_bitfield, __IANUM_ISSET_ID);
  }

  public void setIaNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IANUM_ISSET_ID, value);
  }

  public int getAlignmentPointsSize() {
    return (this.alignmentPoints == null) ? 0 : this.alignmentPoints.size();
  }

  public java.util.Iterator<TIntPoint> getAlignmentPointsIterator() {
    return (this.alignmentPoints == null) ? null : this.alignmentPoints.iterator();
  }

  public void addToAlignmentPoints(TIntPoint elem) {
    if (this.alignmentPoints == null) {
      this.alignmentPoints = new ArrayList<TIntPoint>();
    }
    this.alignmentPoints.add(elem);
  }

  public List<TIntPoint> getAlignmentPoints() {
    return this.alignmentPoints;
  }

  public TRecipeDescriptor setAlignmentPoints(List<TIntPoint> alignmentPoints) {
    this.alignmentPoints = alignmentPoints;
    return this;
  }

  public void unsetAlignmentPoints() {
    this.alignmentPoints = null;
  }

  /** Returns true if field alignmentPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetAlignmentPoints() {
    return this.alignmentPoints != null;
  }

  public void setAlignmentPointsIsSet(boolean value) {
    if (!value) {
      this.alignmentPoints = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SYSTEM_NAME:
      if (value == null) {
        unsetSystemName();
      } else {
        setSystemName((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case IA_NUM:
      if (value == null) {
        unsetIaNum();
      } else {
        setIaNum((Integer)value);
      }
      break;

    case ALIGNMENT_POINTS:
      if (value == null) {
        unsetAlignmentPoints();
      } else {
        setAlignmentPoints((List<TIntPoint>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SYSTEM_NAME:
      return getSystemName();

    case VERSION:
      return getVersion();

    case IA_NUM:
      return getIaNum();

    case ALIGNMENT_POINTS:
      return getAlignmentPoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SYSTEM_NAME:
      return isSetSystemName();
    case VERSION:
      return isSetVersion();
    case IA_NUM:
      return isSetIaNum();
    case ALIGNMENT_POINTS:
      return isSetAlignmentPoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRecipeDescriptor)
      return this.equals((TRecipeDescriptor)that);
    return false;
  }

  public boolean equals(TRecipeDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_systemName = true && this.isSetSystemName();
    boolean that_present_systemName = true && that.isSetSystemName();
    if (this_present_systemName || that_present_systemName) {
      if (!(this_present_systemName && that_present_systemName))
        return false;
      if (!this.systemName.equals(that.systemName))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_iaNum = true;
    boolean that_present_iaNum = true;
    if (this_present_iaNum || that_present_iaNum) {
      if (!(this_present_iaNum && that_present_iaNum))
        return false;
      if (this.iaNum != that.iaNum)
        return false;
    }

    boolean this_present_alignmentPoints = true && this.isSetAlignmentPoints();
    boolean that_present_alignmentPoints = true && that.isSetAlignmentPoints();
    if (this_present_alignmentPoints || that_present_alignmentPoints) {
      if (!(this_present_alignmentPoints && that_present_alignmentPoints))
        return false;
      if (!this.alignmentPoints.equals(that.alignmentPoints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_systemName = true && (isSetSystemName());
    list.add(present_systemName);
    if (present_systemName)
      list.add(systemName);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_iaNum = true;
    list.add(present_iaNum);
    if (present_iaNum)
      list.add(iaNum);

    boolean present_alignmentPoints = true && (isSetAlignmentPoints());
    list.add(present_alignmentPoints);
    if (present_alignmentPoints)
      list.add(alignmentPoints);

    return list.hashCode();
  }

  @Override
  public int compareTo(TRecipeDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemName()).compareTo(other.isSetSystemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemName, other.systemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIaNum()).compareTo(other.isSetIaNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIaNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iaNum, other.iaNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlignmentPoints()).compareTo(other.isSetAlignmentPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlignmentPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alignmentPoints, other.alignmentPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRecipeDescriptor(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemName:");
    if (this.systemName == null) {
      sb.append("null");
    } else {
      sb.append(this.systemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iaNum:");
    sb.append(this.iaNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alignmentPoints:");
    if (this.alignmentPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.alignmentPoints);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRecipeDescriptorStandardSchemeFactory implements SchemeFactory {
    public TRecipeDescriptorStandardScheme getScheme() {
      return new TRecipeDescriptorStandardScheme();
    }
  }

  private static class TRecipeDescriptorStandardScheme extends StandardScheme<TRecipeDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRecipeDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYSTEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemName = iprot.readString();
              struct.setSystemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IA_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iaNum = iprot.readI32();
              struct.setIaNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALIGNMENT_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.alignmentPoints = new ArrayList<TIntPoint>(_list10.size);
                TIntPoint _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new TIntPoint();
                  _elem11.read(iprot);
                  struct.alignmentPoints.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setAlignmentPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRecipeDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(struct.systemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IA_NUM_FIELD_DESC);
      oprot.writeI32(struct.iaNum);
      oprot.writeFieldEnd();
      if (struct.alignmentPoints != null) {
        oprot.writeFieldBegin(ALIGNMENT_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.alignmentPoints.size()));
          for (TIntPoint _iter13 : struct.alignmentPoints)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRecipeDescriptorTupleSchemeFactory implements SchemeFactory {
    public TRecipeDescriptorTupleScheme getScheme() {
      return new TRecipeDescriptorTupleScheme();
    }
  }

  private static class TRecipeDescriptorTupleScheme extends TupleScheme<TRecipeDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRecipeDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSystemName()) {
        optionals.set(1);
      }
      if (struct.isSetVersion()) {
        optionals.set(2);
      }
      if (struct.isSetIaNum()) {
        optionals.set(3);
      }
      if (struct.isSetAlignmentPoints()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSystemName()) {
        oprot.writeString(struct.systemName);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetIaNum()) {
        oprot.writeI32(struct.iaNum);
      }
      if (struct.isSetAlignmentPoints()) {
        {
          oprot.writeI32(struct.alignmentPoints.size());
          for (TIntPoint _iter14 : struct.alignmentPoints)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRecipeDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.systemName = iprot.readString();
        struct.setSystemNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.iaNum = iprot.readI32();
        struct.setIaNumIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.alignmentPoints = new ArrayList<TIntPoint>(_list15.size);
          TIntPoint _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new TIntPoint();
            _elem16.read(iprot);
            struct.alignmentPoints.add(_elem16);
          }
        }
        struct.setAlignmentPointsIsSet(true);
      }
    }
  }

}

