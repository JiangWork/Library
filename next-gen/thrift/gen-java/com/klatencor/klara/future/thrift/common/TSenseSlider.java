/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.klatencor.klara.future.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-08")
public class TSenseSlider implements org.apache.thrift.TBase<TSenseSlider, TSenseSlider._Fields>, java.io.Serializable, Cloneable, Comparable<TSenseSlider> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSenseSlider");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField F_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fValue", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField F_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("fMin", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField F_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fMax", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSenseSliderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSenseSliderTupleSchemeFactory());
  }

  public String name; // required
  public int type; // required
  public double fValue; // required
  public double fMin; // required
  public double fMax; // required
  public int value; // required
  public int min; // required
  public int max; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    F_VALUE((short)3, "fValue"),
    F_MIN((short)4, "fMin"),
    F_MAX((short)5, "fMax"),
    VALUE((short)6, "value"),
    MIN((short)7, "min"),
    MAX((short)8, "max");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // F_VALUE
          return F_VALUE;
        case 4: // F_MIN
          return F_MIN;
        case 5: // F_MAX
          return F_MAX;
        case 6: // VALUE
          return VALUE;
        case 7: // MIN
          return MIN;
        case 8: // MAX
          return MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __FVALUE_ISSET_ID = 1;
  private static final int __FMIN_ISSET_ID = 2;
  private static final int __FMAX_ISSET_ID = 3;
  private static final int __VALUE_ISSET_ID = 4;
  private static final int __MIN_ISSET_ID = 5;
  private static final int __MAX_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.F_MIN, new org.apache.thrift.meta_data.FieldMetaData("fMin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.F_MAX, new org.apache.thrift.meta_data.FieldMetaData("fMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSenseSlider.class, metaDataMap);
  }

  public TSenseSlider() {
  }

  public TSenseSlider(
    String name,
    int type,
    double fValue,
    double fMin,
    double fMax,
    int value,
    int min,
    int max)
  {
    this();
    this.name = name;
    this.type = type;
    setTypeIsSet(true);
    this.fValue = fValue;
    setFValueIsSet(true);
    this.fMin = fMin;
    setFMinIsSet(true);
    this.fMax = fMax;
    setFMaxIsSet(true);
    this.value = value;
    setValueIsSet(true);
    this.min = min;
    setMinIsSet(true);
    this.max = max;
    setMaxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSenseSlider(TSenseSlider other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.type = other.type;
    this.fValue = other.fValue;
    this.fMin = other.fMin;
    this.fMax = other.fMax;
    this.value = other.value;
    this.min = other.min;
    this.max = other.max;
  }

  public TSenseSlider deepCopy() {
    return new TSenseSlider(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setTypeIsSet(false);
    this.type = 0;
    setFValueIsSet(false);
    this.fValue = 0.0;
    setFMinIsSet(false);
    this.fMin = 0.0;
    setFMaxIsSet(false);
    this.fMax = 0.0;
    setValueIsSet(false);
    this.value = 0;
    setMinIsSet(false);
    this.min = 0;
    setMaxIsSet(false);
    this.max = 0;
  }

  public String getName() {
    return this.name;
  }

  public TSenseSlider setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public TSenseSlider setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public double getFValue() {
    return this.fValue;
  }

  public TSenseSlider setFValue(double fValue) {
    this.fValue = fValue;
    setFValueIsSet(true);
    return this;
  }

  public void unsetFValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FVALUE_ISSET_ID);
  }

  /** Returns true if field fValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFValue() {
    return EncodingUtils.testBit(__isset_bitfield, __FVALUE_ISSET_ID);
  }

  public void setFValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FVALUE_ISSET_ID, value);
  }

  public double getFMin() {
    return this.fMin;
  }

  public TSenseSlider setFMin(double fMin) {
    this.fMin = fMin;
    setFMinIsSet(true);
    return this;
  }

  public void unsetFMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FMIN_ISSET_ID);
  }

  /** Returns true if field fMin is set (has been assigned a value) and false otherwise */
  public boolean isSetFMin() {
    return EncodingUtils.testBit(__isset_bitfield, __FMIN_ISSET_ID);
  }

  public void setFMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FMIN_ISSET_ID, value);
  }

  public double getFMax() {
    return this.fMax;
  }

  public TSenseSlider setFMax(double fMax) {
    this.fMax = fMax;
    setFMaxIsSet(true);
    return this;
  }

  public void unsetFMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FMAX_ISSET_ID);
  }

  /** Returns true if field fMax is set (has been assigned a value) and false otherwise */
  public boolean isSetFMax() {
    return EncodingUtils.testBit(__isset_bitfield, __FMAX_ISSET_ID);
  }

  public void setFMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FMAX_ISSET_ID, value);
  }

  public int getValue() {
    return this.value;
  }

  public TSenseSlider setValue(int value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public int getMin() {
    return this.min;
  }

  public TSenseSlider setMin(int min) {
    this.min = min;
    setMinIsSet(true);
    return this;
  }

  public void unsetMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void setMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public int getMax() {
    return this.max;
  }

  public TSenseSlider setMax(int max) {
    this.max = max;
    setMaxIsSet(true);
    return this;
  }

  public void unsetMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case F_VALUE:
      if (value == null) {
        unsetFValue();
      } else {
        setFValue((Double)value);
      }
      break;

    case F_MIN:
      if (value == null) {
        unsetFMin();
      } else {
        setFMin((Double)value);
      }
      break;

    case F_MAX:
      if (value == null) {
        unsetFMax();
      } else {
        setFMax((Double)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Integer)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Integer)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case F_VALUE:
      return getFValue();

    case F_MIN:
      return getFMin();

    case F_MAX:
      return getFMax();

    case VALUE:
      return getValue();

    case MIN:
      return getMin();

    case MAX:
      return getMax();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case F_VALUE:
      return isSetFValue();
    case F_MIN:
      return isSetFMin();
    case F_MAX:
      return isSetFMax();
    case VALUE:
      return isSetValue();
    case MIN:
      return isSetMin();
    case MAX:
      return isSetMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSenseSlider)
      return this.equals((TSenseSlider)that);
    return false;
  }

  public boolean equals(TSenseSlider that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_fValue = true;
    boolean that_present_fValue = true;
    if (this_present_fValue || that_present_fValue) {
      if (!(this_present_fValue && that_present_fValue))
        return false;
      if (this.fValue != that.fValue)
        return false;
    }

    boolean this_present_fMin = true;
    boolean that_present_fMin = true;
    if (this_present_fMin || that_present_fMin) {
      if (!(this_present_fMin && that_present_fMin))
        return false;
      if (this.fMin != that.fMin)
        return false;
    }

    boolean this_present_fMax = true;
    boolean that_present_fMax = true;
    if (this_present_fMax || that_present_fMax) {
      if (!(this_present_fMax && that_present_fMax))
        return false;
      if (this.fMax != that.fMax)
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    boolean this_present_min = true;
    boolean that_present_min = true;
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (this.min != that.min)
        return false;
    }

    boolean this_present_max = true;
    boolean that_present_max = true;
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (this.max != that.max)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_fValue = true;
    list.add(present_fValue);
    if (present_fValue)
      list.add(fValue);

    boolean present_fMin = true;
    list.add(present_fMin);
    if (present_fMin)
      list.add(fMin);

    boolean present_fMax = true;
    list.add(present_fMax);
    if (present_fMax)
      list.add(fMax);

    boolean present_value = true;
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_min = true;
    list.add(present_min);
    if (present_min)
      list.add(min);

    boolean present_max = true;
    list.add(present_max);
    if (present_max)
      list.add(max);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSenseSlider other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFValue()).compareTo(other.isSetFValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fValue, other.fValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFMin()).compareTo(other.isSetFMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fMin, other.fMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFMax()).compareTo(other.isSetFMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fMax, other.fMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSenseSlider(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fValue:");
    sb.append(this.fValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fMin:");
    sb.append(this.fMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fMax:");
    sb.append(this.fMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min:");
    sb.append(this.min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    sb.append(this.max);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSenseSliderStandardSchemeFactory implements SchemeFactory {
    public TSenseSliderStandardScheme getScheme() {
      return new TSenseSliderStandardScheme();
    }
  }

  private static class TSenseSliderStandardScheme extends StandardScheme<TSenseSlider> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSenseSlider struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // F_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fValue = iprot.readDouble();
              struct.setFValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // F_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fMin = iprot.readDouble();
              struct.setFMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // F_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fMax = iprot.readDouble();
              struct.setFMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.value = iprot.readI32();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min = iprot.readI32();
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max = iprot.readI32();
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSenseSlider struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.fValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F_MIN_FIELD_DESC);
      oprot.writeDouble(struct.fMin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F_MAX_FIELD_DESC);
      oprot.writeDouble(struct.fMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeI32(struct.value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_FIELD_DESC);
      oprot.writeI32(struct.min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      oprot.writeI32(struct.max);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSenseSliderTupleSchemeFactory implements SchemeFactory {
    public TSenseSliderTupleScheme getScheme() {
      return new TSenseSliderTupleScheme();
    }
  }

  private static class TSenseSliderTupleScheme extends TupleScheme<TSenseSlider> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSenseSlider struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetFValue()) {
        optionals.set(2);
      }
      if (struct.isSetFMin()) {
        optionals.set(3);
      }
      if (struct.isSetFMax()) {
        optionals.set(4);
      }
      if (struct.isSetValue()) {
        optionals.set(5);
      }
      if (struct.isSetMin()) {
        optionals.set(6);
      }
      if (struct.isSetMax()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetFValue()) {
        oprot.writeDouble(struct.fValue);
      }
      if (struct.isSetFMin()) {
        oprot.writeDouble(struct.fMin);
      }
      if (struct.isSetFMax()) {
        oprot.writeDouble(struct.fMax);
      }
      if (struct.isSetValue()) {
        oprot.writeI32(struct.value);
      }
      if (struct.isSetMin()) {
        oprot.writeI32(struct.min);
      }
      if (struct.isSetMax()) {
        oprot.writeI32(struct.max);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSenseSlider struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fValue = iprot.readDouble();
        struct.setFValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fMin = iprot.readDouble();
        struct.setFMinIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fMax = iprot.readDouble();
        struct.setFMaxIsSet(true);
      }
      if (incoming.get(5)) {
        struct.value = iprot.readI32();
        struct.setValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.min = iprot.readI32();
        struct.setMinIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max = iprot.readI32();
        struct.setMaxIsSet(true);
      }
    }
  }

}

